// L∆∞u t·ªáp n√†y d∆∞·ªõi d·∫°ng server/scripts/drop-index.js
import mongoose from "mongoose";
import dotenv from "dotenv";
import { MongoClient } from "mongodb";

dotenv.config();

// K·∫øt n·ªëi t·ªõi MongoDB v√† x√≥a unique index
const dropOrderIdIndex = async () => {
  let client;

  try {
    console.log("üîó Connecting to MongoDB...");
    console.log("URI:", process.env.MONGODB_URI ? "‚úÖ Found" : "‚ùå Missing");

    if (!process.env.MONGODB_URI) {
      throw new Error("MONGODB_URI is not defined in environment variables");
    }

    // K·∫øt n·ªëi t·ªõi MongoDB
    client = await MongoClient.connect(process.env.MONGODB_URI, {
      useUnifiedTopology: true,
    });

    const db = client.db(); // L·∫•y database t·ª´ URI
    const collection = db.collection("orders");

    console.log("‚úÖ Connected successfully!");

    // Li·ªát k√™ t·∫•t c·∫£ c√°c index hi·ªán t·∫°i
    console.log("\nüìã Current indexes:");
    const indexes = await collection.indexes();
    indexes.forEach((index, i) => {
      console.log(`${i + 1}. ${index.name}:`, JSON.stringify(index.key));
    });

    // Ki·ªÉm tra v√† x√≥a index orderId_1 n·∫øu t·ªìn t·∫°i
    const orderIdIndexExists = indexes.some(
      (index) => index.name === "orderId_1"
    );

    if (orderIdIndexExists) {
      console.log("\nüóëÔ∏è  Dropping orderId_1 index...");

      try {
        const result = await collection.dropIndex("orderId_1");
        console.log("‚úÖ Successfully dropped orderId_1 index:", result);
      } catch (dropError) {
        if (dropError.message.includes("index not found")) {
          console.log("‚ÑπÔ∏è  Index orderId_1 not found (already dropped)");
        } else {
          throw dropError;
        }
      }
    } else {
      console.log(
        "\n‚ÑπÔ∏è  orderId_1 index not found (already dropped or never existed)"
      );
    }

    // Ki·ªÉm tra v√† x√≥a c√°c index kh√°c li√™n quan ƒë·∫øn orderId n·∫øu c·∫ßn
    const otherOrderIdIndexes = indexes.filter(
      (index) => index.name.includes("orderId") && index.name !== "orderId_1"
    );

    if (otherOrderIdIndexes.length > 0) {
      console.log("\nüîç Found other orderId-related indexes:");
      otherOrderIdIndexes.forEach((index) => {
        console.log(`- ${index.name}:`, JSON.stringify(index.key));
      });

      // X√≥a c√°c unique index kh√°c n·∫øu c√≥
      for (const index of otherOrderIdIndexes) {
        if (index.unique) {
          console.log(`üóëÔ∏è  Dropping unique index: ${index.name}`);
          try {
            await collection.dropIndex(index.name);
            console.log(`‚úÖ Dropped ${index.name}`);
          } catch (error) {
            console.log(`‚ö†Ô∏è  Could not drop ${index.name}:`, error.message);
          }
        }
      }
    }

    // T·∫°o l·∫°i index th∆∞·ªùng (kh√¥ng unique) cho orderId
    console.log("\nüîß Creating new non-unique index for orderId...");
    try {
      await collection.createIndex({ orderId: 1 }, { background: true });
      console.log("‚úÖ Created new non-unique index for orderId");
    } catch (createError) {
      console.log("‚ö†Ô∏è  Could not create new index:", createError.message);
    }

    // T·∫°o compound indexes ƒë·ªÉ t·ªëi ∆∞u performance
    console.log("\nüîß Creating compound indexes for better performance...");

    const compoundIndexes = [
      { userId: 1, orderId: 1 },
      { userId: 1, createdAt: -1 },
      { orderId: 1, createdAt: -1 },
    ];

    for (const indexSpec of compoundIndexes) {
      try {
        await collection.createIndex(indexSpec, { background: true });
        console.log(`‚úÖ Created compound index:`, JSON.stringify(indexSpec));
      } catch (createError) {
        if (createError.message.includes("already exists")) {
          console.log(
            `‚ÑπÔ∏è  Compound index already exists:`,
            JSON.stringify(indexSpec)
          );
        } else {
          console.log(
            `‚ö†Ô∏è  Could not create compound index:`,
            createError.message
          );
        }
      }
    }

    // Hi·ªÉn th·ªã index cu·ªëi c√πng
    console.log("\nüìã Final indexes:");
    const finalIndexes = await collection.indexes();
    finalIndexes.forEach((index, i) => {
      const uniqueText = index.unique ? " (UNIQUE)" : "";
      console.log(
        `${i + 1}. ${index.name}${uniqueText}:`,
        JSON.stringify(index.key)
      );
    });

    console.log("\nüéâ Index migration completed successfully!");
  } catch (error) {
    console.error("\n‚ùå Script failed:", error);
    console.error("Error details:", error.message);

    if (error.message.includes("authentication")) {
      console.log("\nüí° Suggestions:");
      console.log("- Check your MongoDB URI credentials");
      console.log("- Ensure the user has proper permissions");
    } else if (error.message.includes("ENOTFOUND")) {
      console.log("\nüí° Suggestions:");
      console.log("- Check your internet connection");
      console.log("- Verify the MongoDB server address");
    }

    process.exit(1);
  } finally {
    if (client) {
      console.log("\nüîí Closing connection...");
      await client.close();
      console.log("‚úÖ Connection closed.");
    }
  }
};

// Th√™m validation cho environment
const validateEnvironment = () => {
  if (!process.env.MONGODB_URI) {
    console.error("‚ùå Error: MONGODB_URI environment variable is required");
    console.log("\nüí° Please set your MongoDB URI in .env file:");
    console.log("MONGODB_URI=mongodb://localhost:27017/your_database");
    console.log("or");
    console.log(
      "MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/database"
    );
    process.exit(1);
  }
};

// Ch·∫°y script
console.log("üöÄ Starting MongoDB Index Migration Script");
console.log("==========================================");

validateEnvironment();
dropOrderIdIndex();
